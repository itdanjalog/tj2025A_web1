[ 개발 흐름 ]

	개발자 코드(개발자PC) ---컴파일/빌드---> 웹서버(톰캣) 프로그램	<---- HTTP Request--- 클라이언트(유저/크롬)
														----- HTTP Response--->

																	예] Talend API
														http://localhost:8080/tj2024b_web1/day07/example7
														<---->

[ 톰캣 ]
핵심 요약
톰캣(Tomcat)은 자바 기반 웹 애플리케이션 서버로, HTTP 요청을 처리하고 JSP/서블릿을 실행한다.
톰캣의 **세션(Session)**은 사용자의 상태와 데이터를 브라우저별로 유지·관리하기 위해 서버 메모리에 저장하는 객체이며, 주로 로그인 유지, 장바구니, 사용자 설정 등에 활용된다.
상세 설명
1. 톰캣(Tomcat) 개요
    정의: 아파치 재단에서 개발한 오픈소스 자바 웹 애플리케이션 서버(WAS : web application server ).
    역할: 클라이언트(브라우저)에서 들어오는 HTTP 요청을 처리하고, JSP/서블릿 실행 결과를 응답으로 반환.
    특징: Java EE 일부 스펙(JSP, Servlet) 지원, 경량 서버, 개발·테스트 환경에서 많이 사용.

핵심 요약
**서블릿(Servlet)**은 자바로 작성된 서버 프로그램으로,
웹 브라우저(클라이언트)의 요청을 받아 처리한 뒤 결과를 응답하는 역할을 한다.
톰캣과 같은 서블릿 컨테이너에서 실행되며, JSP의 기반 기술이기도 하다.

상세 설명
1. 서블릿(Servlet) 정의
정의: 자바 기반의 동적 웹 페이지를 만들기 위해 사용되는 서버 측 프로그램.

역할: HTTP 요청(Request)을 받아 로직을 처리하고, 그 결과를 HTTP 응답(Response)으로 반환.

실행 환경: 톰캣(Tomcat)과 같은 서블릿 컨테이너(WAS) 내에서 동작.

2. 특징
    플랫폼 독립성 – 자바 기반이라 OS에 관계없이 실행 가능.

    고성능 – 한 번 로딩된 후 여러 요청을 쓰레드로 처리, 속도가 빠름.

    안정성 – 자바 언어의 메모리 관리(GC)와 예외 처리 기능 활용.

    확장성 – 필터(Filter), 리스너(Listener) 등과 결합해 기능 확장 가능.

3. 동작 원리 (요청 → 응답 흐름)
    클라이언트 요청: 브라우저에서 URL 입력 또는 폼 제출.

    서블릿 컨테이너: 해당 요청을 분석해 해당 서블릿 클래스를 실행.

    서블릿 실행: service() 메서드에서 요청 방식(GET/POST)에 맞춰 doGet() 또는 doPost() 실행.

    결과 응답: HTML, JSON, XML 등으로 변환해 클라이언트에 반환.

4. 생명주기(Lifecycle)
    서블릿의 생명주기는 서블릿 컨테이너가 관리한다.

    로딩 & 인스턴스 생성 – 최초 요청 시 한 번만 실행.

    초기화 (init()) – 설정 초기화, DB 연결 준비.

    서비스 (service()) – 요청 처리.

    소멸 (destroy()) – 컨테이너 종료 시 자원 해제.






[ 톰캣 세션 ]
	- 네트워크 분야에서 상호작용(정보 교환)을 하는데 상태의 의미
	- 브라우저 세션/쿠키 , 톰캣 세션/쿠키 지원한다.
	1. 정의 : tomcat(톰캣) 서버내 데이터를 저장하고 관리할 수 있게 메모리 제공
		-> 과도한 사용은 서버의 부하
	2. 목적 : 1.상태(데이터)관리 2. 인증/권한 3.효율적인 데이터 관리
	3. 주 사용처 :
		1. 로그인상태유지
		2. (비회원제)장바구니 기능 VS (회원제)장바구니 = DB
		3. 자동로그인, 테마 등등 사용자의 설정값
		4. 실시간 처리
		등등
	4. 톰캣내 세션 객체
		1. request.getSession(); : 현재 톰캣의 세션 객체 불러온다, 없으면 생성
		* HttpSession httpSession = req.getSession();
		* (1) 브라우저의 첫 요청이면 세션 객체 생성  , 두번째 부터는 기존 세션 객체 불러온다.
		* (2) 세션은 사용자의 IP 와 브라우저 요청 정보를 이용하여 세션객체 관리 하므로 *브라우저마다 서로 다른 메모리공간*
		 	--> 내가 크롬에서 네이버 로그인 했다면 , 엣지 에서는 상관없이 로그인상태가 없다.
		 	--> 내가 PC방에서 쇼핑몰의 (비회원제) 장바구니를 사용했다면 , 집 PC에서는 (비회원제) 장바구니가 비어 있다.
 		* 서로 다른 브라우저이면 다른 세션이 할당된다. 브라우저 1개당 세션1개
 	5. 세션 객체 주요 메소드
 		1. httpSession.getAttributeNames() 			: 세션 객체내 모든 속성들을 Collections 객체로 반환함수.
 		2. httpSession.getCreationTime() 			: 세션객체가 만들어진 시간 , 시 분 초 환산 필요
 		3. httpSession.getId()						: 세션객체의 (인스턴스)주소값 의 식별자
 		4. httpSession.getLastAccessedTime()		: 세션객체가 마지막으로 사용된 시간 ,  시 분 초 환산 필요
 		5. httpSession.isNew()						: 세션객체가 방금 만들어졌는지 여부 반환 , true/false
 		6. httpSession.invalidate()					: 세션객체의 모든 속성을 제거/초기화
 		7. httpSession.setMaxInactiveInterval("초")	: 세션객체의 최대 활성화 유지시간/생명주기 설정
 			1. 초 단위 : .setMaxInactiveInterval(60*60) : 60(1분) * 60 => 1시간 세션 유지시간 설정
 			2. 유지시간이 지나면 자동으로 세션객체는 초기화 된다.
 			3. 세션의 활성화 상태 이므로 세션을 갱신하면 시간은 처음부터 다시 카운트 된다.
 				ex1] 1시간 설정 --> 30분 뒤 요청하면 -> 1시간 설정( 세션 활성화 상태 )
 				ex2] 1시간 설정 --> 1시간10분 뒤 요청하면 -> 세션은 없음 상태
 				ex] 은행(신한/국민 로그인 상태) 사이트

	6. 세션 객체내 속성명과 속성값 을 한쌍으로 데이터 저장 ( = MAP 컬렉션과 유사 )
		1. httpSession.setAttribute( "속성명", 자료 );		: 세션객체내 지정한 속성명으로 자료를 저장한다.
			- 무조건 속성 자료의 타입은 Object 이다. (이유 : 세션 객체의 모든 타입 자료를 저장하기 위해 Object 사용이 되었다.)
			- ex]
				session.setAttribute( "loginMno" , loginMno );
				*[자동타입변환/업캐스팅] loginMno (정수) ---> 세션에 등록되면  loginMno (Object)

		2. httpSession.getAttribute( "속성명")			: 세션객체내 지정한 속성명의 값/자료 반환한다.
			- 무조건 속성 자료의 타입은 Object 이므로 자료를 기존 타입으로 타입변환 해야한다.
			- ex]
				Object object = session.setAttribute( "loginMno");
				int loginMno = (Integer)object;
				*[강제타입변환/다운캐스팅] 세션에서 꺼내면 --> loginMno( Object ) --> (Integer)object;

		3. httpSession.removeAttribute("속성명")			: 세션객체내 지정한 속성명 제거 한다.

	* 세션의 생명주기( 태어나고 사라지기 까지 주기 ) - 전역변수로 활용가능하다.
		1. 탄생 : 클라이언트가 서버로부터 첫 요청을 보낼때.
		2. 주기 : 브라우저 실행도중
		3. 죽음 : 서버가 종료될때 , 재시작될때 , 브라우저(모든 탭)가 종료될때


2. 톰캣 세션(Session)
(1) 정의
    톰캣 서버 내에서 사용자별 데이터를 저장하고 관리할 수 있는 메모리 공간.
    브라우저마다 별도 세션이 생성되며, 과도한 사용은 서버 부하를 초래.

(2) 목적
    상태 관리 (State Management)
    인증·권한 관리
    효율적인 데이터 관리

(3) 주요 사용 사례
    로그인 상태 유지
    장바구니 기능 (비회원제: 세션 / 회원제: DB)
    사용자 개별 설정값 저장 (자동 로그인, 테마 등)
    실시간 처리 데이터 저장


